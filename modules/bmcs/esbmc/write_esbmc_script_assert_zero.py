#!/usr/bin/env python
from __future__ import print_function
# -*- coding: latin1 -*-

__author__ = 'Herbert OLiveira Rocha'



#From Python
import sys
import os
import re
import commands



class EsbmcRunAssertsZero(object):

    def __init__(self):
        self.cmd_generate_claims = "--no-library --show-claims"
        self.esbmcpath = "esbmc_v1_18"


    def getArch(self):
        savearch = commands.getoutput("arch")
        if savearch == "x86_64":
            return "--64"
        else:
            return "--32"


    def generate_claims(self, _cprograminstr):
        if _cprograminstr.endswith('.c'):
            if self.esbmcpath:
                cmdclaims = self.esbmcpath + " " + self.getArch() + " " \
                            + self.cmd_generate_claims + " " + _cprograminstr
                #print(cmdclaims)
                listgetclaims = commands.getoutput(cmdclaims).split("\n")
                return listgetclaims


    def get_claims_from_lines(self, _listofclaims):

        lengthlistcl = len(_listofclaims)
        listresultnumcl = []

        # Doing a search in the claims list to identify the list of lines number
        # Regex patterns
        skipblankline = re.compile("^$")
        getclaimnum = re.compile("^Claim[ ]*([0-9]*):")
        getnumlinefromcl = re.compile("line[ ]*([0-9]*)")
        getclaimcomment =  re.compile("assertion 0")

        count_cl_index = 0
        while count_cl_index < lengthlistcl:

            matchblankline = skipblankline.search(_listofclaims[count_cl_index])
            if not matchblankline is not None:

                matchgetcl = getclaimnum.search(_listofclaims[count_cl_index])
                if matchgetcl is not None:
                    count_cl_index += 2
                    #print(">>>>>>>>>>>>> ", _listofclaims[count_cl_index])

                    matchtypecl = getclaimcomment.search(_listofclaims[count_cl_index])
                    if matchtypecl is not None:
                        listresultnumcl.append(matchgetcl.group(1))

                        count_cl_index += 2 # to start from the another claim

                count_cl_index += 1

        return listresultnumcl


    def write_esbmc_script(self, _cprogram, _listnumclaims):

        scriptnametocode = _cprogram.replace(".c","_runesbmc.py")
        dirname2ce = _cprogram.replace(".c","_outESBMC")

        linesscript = open(scriptnametocode, "w")

        # script header
        linesscript.write("#!/usr/bin/env python \n")
        linesscript.write("from __future__ import print_function \n")
        linesscript.write("import commands \n")
        linesscript.write("import sys \n")
        linesscript.write("import os \n")
        linesscript.write("import re \n")
        linesscript.write("\n")
        linesscript.write("# Script generated by Inception tool \n")
        linesscript.write("# Goal: Check each assertion zero added by INCEPTION to data generation \n")
        linesscript.write("\n")

        # Running esbmc
        linesscript.write("unwindresult = re.compile(\"unwinding assertion loop\") \n")
        linesscript.write("violatedresult = re.compile(\"VERIFICATION FAILED\") \n")
        linesscript.write("resultesbmc = \"\" \n")

        linesscript.write("if not os.path.exists(\""+dirname2ce+"\"):\n")
        linesscript.write("    os.mkdir(\""+dirname2ce+"\")\n")

        for index, nrclaim in enumerate(_listnumclaims):
            linesscript.write("# ------------ Checking Claim < "+nrclaim+" > \n")
            linesscript.write("unwindstatus = False \n")
            linesscript.write("bound = 50 \n")
            linesscript.write("# Name to counterexample file\n")
            linesscript.write("cefile = \""+dirname2ce+"/outesbmc_to_claim_"+nrclaim+".txt\"\n")

            #linesscript.write("while not unwindstatus: \n")
            linesscript.write("esbmc_cmd = \" "+self.esbmcpath+" "+self.getArch()+" --no-library --claim " + nrclaim \
                                              + " --no-unwinding-assertions --no-slice --unwind \" + str(bound) + \" "\
                                              + _cprogram + "\" \n")

            linesscript.write("resultesbmc = commands.getoutput( esbmc_cmd )\n")

            # linesscript.write("    matchunwind = unwindresult.search(resultesbmc) \n")
            # linesscript.write("    if not matchunwind is not None: \n")
            # linesscript.write("        unwindstatus = True \n")
            # linesscript.write("    else: \n")
            # linesscript.write("        bound += 5 \n")
            # linesscript.write("    \n")

            linesscript.write("matchresult = violatedresult.search(resultesbmc) \n")
            linesscript.write("if matchresult is not None: \n")
            linesscript.write("    print(\"VERIFICATION FAILED\") \n")
            linesscript.write("    \n")
            linesscript.write("    # saiving counterexample\n")
            linesscript.write("    commands.getoutput(\" echo \\\"\"+ resultesbmc +\"\\\" > \" + cefile )\n")
            linesscript.write("else: \n")
            linesscript.write("    print(\"VERIFICATION SUCCESSEFUL\") \n")
            linesscript.write("    \n")

        linesscript.close()


# Only for tests
if __name__ == "__main__":
    runwritescript = EsbmcRunAssertsZero()
    claimslist = runwritescript.generate_claims(sys.argv[1])
    listnumcl = runwritescript.get_claims_from_lines(claimslist)
    runwritescript.write_esbmc_script(sys.argv[1], listnumcl)