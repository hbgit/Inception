#!/usr/bin/env python
from __future__ import print_function
# -*- coding: latin1 -*-
from decorator import getfullargspec


__author__ = 'Herbert OLiveira Rocha'

#From Python
import sys
import os
import re
import commands



class EsbmcRun(object):

    def __init__(self):
        self.cmd_generate_claims = "--no-library --show-claims"


    def getArch(self):
        savearch = commands.getoutput("arch")
        if savearch == "x86_64":
            return "--64"
        else:
            return "--32"


    def generate_claims(self, _bmc_program, _esbmc_path):
        if _esbmc_path:
            cmdclaims = _esbmc_path + " " + self.getArch() + " " \
                        + self.cmd_generate_claims + " " + _bmc_program
            #print(cmdclaims)
            listgetclaims = commands.getoutput(cmdclaims).split("\n")
            return listgetclaims


    def get_claims_from_lines(self,_listnumlines,_listofclaims):

        lengthlistcl = len(_listofclaims)
        listresultnumcl = []

        # Doing a search in the claims list to identify the list of lines number
        # Regex patterns
        skipblankline = re.compile("^$")
        getclaimnum = re.compile("^Claim[ ]*([0-9]*):")
        getnumlinefromcl = re.compile("line[ ]*([0-9]*)")

        for numline in _listnumlines:
            count_cl = 0
            flagstop = False

            while count_cl < lengthlistcl and not flagstop:
                matchblankline = skipblankline.search(_listofclaims[count_cl])
                if not matchblankline is not None:
                    matchgetcl = getclaimnum.search(_listofclaims[count_cl])
                    if matchgetcl is not None:
                        count_cl += 1
                        matchnumlinecl = getnumlinefromcl.search(_listofclaims[count_cl])
                        if matchnumlinecl is not None:
                            if numline == int(matchnumlinecl.group(1)):
                                #print(matchgetcl.group(1), matchnumlinecl.group(1))
                                listresultnumcl.append(matchgetcl.group(1))
                                flagstop = True
                count_cl += 1

        return listresultnumcl


    def write_esbmc_script(self, _newbmcprogram, _listnumclaims, _listnuminoricode):

        #TODO: The verification performed should be based on the functions that it was
        #      generated the invariants

        scriptnametocode = _newbmcprogram.replace("__incep_annot.c","_runesbmc.py")

        linesscript = open(scriptnametocode, "w")

        # script header
        linesscript.write("#!/usr/bin/env python \n")
        linesscript.write("from __future__ import print_function \n")
        linesscript.write("import commands \n")
        linesscript.write("import sys \n")
        linesscript.write("import re \n")
        linesscript.write("\n")
        linesscript.write("# Script generated by Inception tool \n")
        linesscript.write("# Goal: Check the invariants pointed out in the claims by the ESBMC \n")
        linesscript.write("\n")

        # Running esbmc
        linesscript.write("unwindresult = re.compile(\"unwinding assertion loop\") \n")
        linesscript.write("violatedresult = re.compile(\"VERIFICATION FAILED\") \n")
        linesscript.write("resultesbmc = \"\" \n")
        #linesscript.write("for nrclaim in _listnumclaims: ")

        for index, nrclaim in enumerate(_listnumclaims):
            linesscript.write("# ------------ Checking Claim < "+nrclaim+" > \n")
            linesscript.write("unwindstatus = False \n")
            linesscript.write("bound = 5 \n")
            linesscript.write("while not unwindstatus: \n")
            linesscript.write("    esbmc_cmd = \"esbmc "+self.getArch()+" --no-library --claim " + nrclaim \
                                              + " --unwind \" + str(bound) + \" "+ _newbmcprogram + "\" \n")
            linesscript.write("    resultesbmc = commands.getoutput(esbmc_cmd) \n")
            linesscript.write("    matchunwind = unwindresult.search(resultesbmc) \n")
            linesscript.write("    if not matchunwind is not None: \n")
            linesscript.write("        unwindstatus = True \n")
            linesscript.write("    else: \n")
            linesscript.write("        bound += 5 \n")
            linesscript.write("    \n")
            linesscript.write("matchresult = violatedresult.search(resultesbmc) \n")
            linesscript.write("if matchresult is not None: \n")
            linesscript.write("    print(resultesbmc) \n")
            linesscript.write("    \n")
            linesscript.write("    print(\"===============================================================\") \n")
            linesscript.write("    print(\"LINE NUMBER in annotated code < "+_listnuminoricode[index]+" > \") \n")
            linesscript.write("    sys.exit() \n")
            linesscript.write("else: \n")
            linesscript.write("    print(\"VERIFICATION SUCCESSEFUL\") \n")
            linesscript.write("    \n")

        linesscript.close()